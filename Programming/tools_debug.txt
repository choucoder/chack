objdump: Can be used to examine compiled binaries.
objdump -M intel -D a.out | grep -A20 main.:

-A20: only display 20 lines after the regular expression main.:
-M intel: intel syntax

GDB: Is used to show the state of the processor registers
right before the program starts.

gdb -q ./a.out
(gdb) break main: pause execution program when it gets to main point
(gdb) run
(gdb) run <arguments>
(gdb) where: show where the programs fail
(gdb) info args: show info about args
(gdb) backtrace or bt (full option): shows the record of each function call on the stack (Pila de llamadas)
(gdb) info registers
(gdb) info register address or (i r address): (o octal, x hexad, u unsigned, t binary) (x/t $rip)
(gdb) set disassembly intel: Set to intel syntax
(gdb) list: list info about source code compilated with -g flag
(gdb) disassembly main: Dump of assembler code for function main():
(gdb) x/display $register: Examine memory $register.
(gdb) nexti: The processor will read the instruction at EIP, execute it and advance eip
to the next instruction.
(gdb) i r eip: info register eip
x: examine
i: instructions
(gdb) x/{number}(x or i){size-letter} $rip: Display the memory as disassembled assembly language instructions
(gdb) nexti, continue, cont: execute the next instruction followed by breakpoint
(gdb) bt: backtrace the stack
echo "set disassembly intel" > /.gdbinit
cat .gdbinit

GCC: Compiler C code.
-g: include extra debuggin information, which will give GDB access to source code

registers:
    (AX, BX, CX, DX): Accumulator, Base, Counter, Data. Act as 
    temporary variables for the CPU when it is executing machine
    instructions.
    (SP, BP, SI, DI): Pointers and indexes. Stack pointer, 
    Base pointer, Source Index, Destination Index. SP and BP 
    store 32-bits addresses, which essencially point to that
    location in memory, for program execution and memory management.
    SI, DI are used to point to the source and destination when
    data needs to be read from or written to.
    (EIP): Instruction pointer, point to the current instruction the
    processor is reading. The processor reads each instruction using
    the EIP register.
    (EFLAGS): using for comparision and memory segmentations.

Intel syntax:
    operation <destination>, <source>
    400527:     48 89 e5        mov rbp, rsp    : mov the value from SP to BP
    40052a:     48 83 ec 10     sub rsp, 0x10   : subtract 10 from SP (storing the result in SP)

Default Size of single unit
    b  A single byte
    h  A halfword, which is two bytes in size
    w  A word, which is four bytes in size
    g  A giant, which is eight bytes in size

Memory Segmentation
    A compiled program's memory is divided into five segments: text, data, bss, heap
    and stack.

    - text or code segment: Is where the assembled machine language instructions
    of programs are located (IP is set to the first instruction in the text segment).

    Execution loop:
        1. Reads the instructions that IP is pointing to
        2. Adds the byte length of the instruction to IP
        3. Executes the instruction that was read in the step 1
        4. Goes back to step 1
    
    - data: Is filled with the initialized global and static variables

    - bss: Is filled with their uninitialized couterparts.

    - heap: Is a segment of memory a programmer can directly control. Blocks of memory
    in this segment can be allocated and used for whatever the programmer might need.
    This means a programmer using the heap allocation functions can reserve and free
    memory on the fly. The growth of the heap moves downward toward higher memory
    memory address.

    - stack: Has variable size and its used as a temporary scratch pad to store local
    function variables and context during function calls. This is what gdb' backtrace
    commands looks at. When a program calls a function, that function will have its own
    set of passed variables, and the function's code will be at a diferent memory location
    in the text segment.

        The stack is used to remember all of the passed variables, the location the IP
    should return to after the function is finished, and all the local variables used
    by that function.

        All of this information is stored together on the stack in what is collectively
    called a stack frame.

        The stack segment of memory is, in fact, a stack data structure, which contains
    stack frames. The ESP Register is used to keep track of the address of the end of
    the stack, which is constantly changing as items are pushed into and popped off of it.

        Its growing upward in a visual listing of memory, toward lower memory adddress.

        When a function is called, several things are pushed to the stack together in a
    stack frame. The BP register is used to reference local function variables in the
    current stack frame. Each stack frame contains the parameters to the function, its
    local variables, and two pointers that are necessary to put things back the way they 
    were: the saved frame pointer (SFP) and the return address. The SFP is used to restore
    BP to its previous value, and the return address is used to restore IP to the next
    instruction found after the function call. This restores the functional context
    of the previous stack frame.

    Low addresses
                    Text (code) segment
                    Data segment
                    bss segment
                    Heap segment (the heap grows down toward higher memory addresses)
                    Stack segment (The stack grows up toward lower memory addresses)
    High addresses
    
                    Top of the stack
    Low addresses
                    buffer
                    flag
                    saved frame pointer (SFP)
                    return address (ret)
                    a
                    b
                    c
                    d
    High addresses

Commands for file handling
    which: locate a command. return the pathnames of the files (or links) which
    would be execute in the current enviroment.

    chsh: allows any user to change his or her own login shell.
    This program needs to be able to make changes to the /etc/passwd file,
    but only on the line that pertains to the current user's  account

    chwon: Change file owner and group. chown owner:group file

    chmod u+s: turns on the setuid permision. (The program can access the files as root)

unsigned char: Use the most significant bit instead of treating it as big flag for +/-